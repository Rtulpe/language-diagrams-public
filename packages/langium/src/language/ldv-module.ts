import type {
  DefaultSharedModuleContext,
  LangiumServices,
  LangiumSharedServices,
  Module,
  PartialLangiumServices,
} from "langium"
import { createDefaultModule, createDefaultSharedModule, inject } from "langium"

import { LdvGeneratedModule, LdvGeneratedSharedModule } from "./generated/module"
import { CompletionProvider, FieldProvider } from "./ldv-completion"
import { TypeChecker } from "./ldv-type-checker"
import { LdvValidationRegistry } from "./ldv-validator"

/**
 * Declaration of custom services - add your own service classes here.
 */
export type LdvAddedServices = {
  validation: {
    TypeChecker: TypeChecker
  }
  Fields: FieldProvider
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type LdvServices = LangiumServices & LdvAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const LdvModule: Module<LdvServices, PartialLangiumServices & LdvAddedServices> = {
  validation: {
    ValidationRegistry: services => new LdvValidationRegistry(services),
    TypeChecker: services => new TypeChecker(services),
  },
  lsp: {
    CompletionProvider: services => new CompletionProvider(services),
  },
  Fields: services => new FieldProvider(services),
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createLdvServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices
  Ldv: LdvServices
} {
  const shared = inject(createDefaultSharedModule(context), LdvGeneratedSharedModule)
  const Ldv = inject(createDefaultModule({ shared }), LdvGeneratedModule, LdvModule)
  shared.ServiceRegistry.register(Ldv)
  return { shared, Ldv }
}
